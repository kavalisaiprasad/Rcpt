{"ast":null,"code":"var _jsxFileName = \"/home/saiprasad/rcptlive/rcpt/src/Mobile/Plan.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Headermobile from './Headermobile';\nimport Footer from './Footer';\nimport { baseurl } from '../Component/Baseurl';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst tabMappings = {\n  'Populer Vouchers': {\n    voucherKey: 'populervouchers',\n    type: 'populervouchers'\n  },\n  'General Topup': {\n    voucherKey: 'generaltopup',\n    type: 'generaltopup'\n  },\n  'Data Vouchers': {\n    voucherKey: 'vouchers',\n    type: 'DATA'\n  },\n  'Voice Vouchers': {\n    voucherKey: 'vouchers',\n    type: 'VOICE'\n  },\n  'SMS Vouchers': {\n    voucherKey: 'vouchers',\n    type: 'SMS'\n  },\n  'ISD Vouchers': {\n    voucherKey: 'vouchers',\n    type: 'ISD'\n  },\n  'Others Vouchers': {\n    voucherKey: 'vouchers',\n    type: 'OTHER'\n  },\n  'Plan Extension': {\n    voucherKey: 'vouchers',\n    type: 'EXTENSON'\n  },\n  'Plan Migration': {\n    voucherKey: 'vouchers',\n    type: 'MIGRATION'\n  }\n};\nfunction Plan() {\n  _s();\n  const [activeTab, setActiveTab] = useState('Populer Vouchers');\n  const [tableData, setTableData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [circleNames, setCircleNames] = useState([]);\n  const [selectedState, setSelectedState] = useState(''); // State selected by the user\n  const [selectedCircleCode, setSelectedCircleCode] = useState('');\n  const [duplicateNames, setDuplicateNames] = useState([]);\n  const handleTabClick = tabLabel => {\n    setActiveTab(tabLabel);\n    const {\n      voucherKey,\n      type\n    } = tabMappings[tabLabel];\n    fetchData(voucherKey, type, selectedCircleCode);\n  };\n  useEffect(() => {\n    fetchCircleName();\n  }, []);\n  const fetchCircleName = async () => {\n    let location;\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLatitude = position.coords.latitude;\n        const userLongitude = position.coords.longitude;\n\n        // Implement your logic to map coordinates to a state and set the user's current state\n        const userState = determineUserLocation(userLatitude, userLongitude);\n        console.log(\"Geo locatooooo:: \" + userState);\n        if (userState) {\n          console.log(\"Geo location \" + userState);\n          location = userState;\n          console.log(\"Geo location11 \" + location);\n          setSelectedState(userState);\n          console.log(\"shghghh:: \" + selectedState);\n          const circleCode = getCircleCodeForState(userState);\n          setSelectedCircleCode(circleCode);\n          console.log(\"circle code ramu:: \" + circleCode);\n        }\n        // Set the default selected state based on the user's current state\n        setSelectedState(userState);\n      });\n    }\n\n    // Define the API endpoint for fetching circle names\n    const circleNamesUrl = `${baseurl}/rcpt-api/getcircle`;\n    // const allcircledata=null;\n\n    const headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n    const requestBody = {};\n    fetch(circleNamesUrl, {\n      method: 'POST',\n      headers: headers,\n      body: requestBody\n    }).then(response => response.json()).then(data => {\n      setCircleNames(data);\n      console.log(\"Geo location12 \" + location);\n      const selectedCircle = data.find(circle => circle.circle_name === location);\n      console.log(\"selectedCircle at url: \" + JSON.stringify(selectedCircle));\n      setSelectedCircleCode(selectedCircle.circle_code);\n      if (data && Array.isArray(data)) {\n        const names = data.map(item => item.circle_name);\n        //console.log(data)\n\n        //  setCircleNames(data); // Store the entire response, including circle_code\n        console.log(\"state name:: \" + selectedState);\n        // setCircleName1(data); // Store the entire response, including circle_code\n\n        //allcircledata=data;\n        //console.log(\"all cicle amain:: \" + JSON.stringify(data))\n      }\n    }).catch(error => {\n      console.error('Error fetching circle names:', error);\n    });\n  };\n  useEffect(() => {\n    console.log(\"All circles for ts:: \" + JSON.stringify(circleNames));\n  }, []);\n\n  // Implement your own logic to determine the user's location based on coordinates\n  function determineUserLocation(latitude, longitude) {\n    // Replace this with your own logic to map coordinates to a state\n    // This is a simplified example with a few states for demonstration\n    const stateCoordinates = {\n      'Andaman and Nicobar Islands': {\n        latitude: 11.7401,\n        longitude: 92.6586\n      },\n      'Andhra Pradesh': {\n        latitude: 15.9129,\n        longitude: 79.7400\n      },\n      'Arunachal Pradesh': {\n        latitude: 27.1004,\n        longitude: 93.6165\n      },\n      'Assam': {\n        latitude: 26.2006,\n        longitude: 92.9376\n      },\n      'Bihar': {\n        latitude: 25.0961,\n        longitude: 85.3131\n      },\n      'Chandigarh': {\n        latitude: 30.7333,\n        longitude: 76.7794\n      },\n      'Chhattisgarh': {\n        latitude: 21.2787,\n        longitude: 81.8661\n      },\n      'Dadra and Nagar Haveli and Daman and Diu': {\n        latitude: 20.1809,\n        longitude: 73.0169\n      },\n      'Delhi': {\n        latitude: 28.6139,\n        longitude: 77.2090\n      },\n      'Goa': {\n        latitude: 15.2993,\n        longitude: 74.1240\n      },\n      'Gujarat': {\n        latitude: 22.2587,\n        longitude: 71.1924\n      },\n      'Haryana': {\n        latitude: 29.0588,\n        longitude: 76.0856\n      },\n      'Himachal Pradesh': {\n        latitude: 31.1048,\n        longitude: 77.1734\n      },\n      'Jammu and Kashmir': {\n        latitude: 33.7782,\n        longitude: 76.5762\n      },\n      'Jharkhand': {\n        latitude: 23.6102,\n        longitude: 85.2799\n      },\n      'Karnataka': {\n        latitude: 12.9716,\n        longitude: 77.5946\n      },\n      'Kerala': {\n        latitude: 10.8505,\n        longitude: 76.2711\n      },\n      'Ladakh': {\n        latitude: 34.1526,\n        longitude: 77.5771\n      },\n      'Lakshadweep': {\n        latitude: 10.5667,\n        longitude: 72.6420\n      },\n      'Madhya Pradesh': {\n        latitude: 22.9734,\n        longitude: 78.6569\n      },\n      'Maharashtra': {\n        latitude: 19.7515,\n        longitude: 75.7139\n      },\n      'Manipur': {\n        latitude: 24.6637,\n        longitude: 93.9063\n      },\n      'Meghalaya': {\n        latitude: 25.4670,\n        longitude: 91.3662\n      },\n      'Mizoram': {\n        latitude: 23.1645,\n        longitude: 92.9376\n      },\n      'Nagaland': {\n        latitude: 26.1584,\n        longitude: 94.5624\n      },\n      'Odisha': {\n        latitude: 20.9517,\n        longitude: 85.0985\n      },\n      'Puducherry': {\n        latitude: 11.9416,\n        longitude: 79.8083\n      },\n      'Punjab': {\n        latitude: 31.1471,\n        longitude: 75.3412\n      },\n      'Rajasthan': {\n        latitude: 27.0238,\n        longitude: 74.2179\n      },\n      'Sikkim': {\n        latitude: 27.5330,\n        longitude: 88.5122\n      },\n      'Tamil Nadu': {\n        latitude: 13.0827,\n        longitude: 80.2707\n      },\n      'Telangana': {\n        latitude: 17.3850,\n        longitude: 78.4867\n      },\n      'Tripura': {\n        latitude: 23.9408,\n        longitude: 91.9882\n      },\n      'Uttar Pradesh': {\n        latitude: 26.8467,\n        longitude: 80.9462\n      },\n      'Uttarakhand': {\n        latitude: 30.0668,\n        longitude: 79.0193\n      },\n      'West Bengal': {\n        latitude: 22.5726,\n        longitude: 88.3639\n      }\n      // Add coordinates for other states as well\n    };\n\n    const userState = Object.keys(stateCoordinates).find(state => isInsideRegion({\n      latitude,\n      longitude\n    }, stateCoordinates[state], 1.5 // Set a radius as needed\n    ));\n\n    setSelectedState(userState);\n    return userState || 'Default State';\n  }\n  useEffect(() => {\n    console.log(\"userState:: \" + selectedState);\n  }, []);\n  function isInsideRegion(point, center, radius) {\n    const distance = Math.sqrt(Math.pow(point.latitude - center.latitude, 2) + Math.pow(point.longitude - center.longitude, 2));\n    return distance <= radius;\n  }\n  useEffect(() => {\n    const circleCode = getCircleCodeForState(selectedState);\n    setSelectedCircleCode(circleCode);\n  }, []);\n  useEffect(() => {\n    fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n  }, []);\n  const getCircleCodeForState = state => {\n    const selectedCircle = circleNames.find(circle => circle.circle_name === state);\n    return selectedCircle ? selectedCircle.circle_code : '';\n  };\n  useEffect(() => {\n    // ...\n\n    if (selectedState) {\n      const circleCode = getCircleCodeForState(selectedState);\n      setSelectedCircleCode(circleCode);\n    }\n  }, [selectedState]);\n  useEffect(() => {\n    if (selectedCircleCode && activeTab) {\n      fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n    }\n  }, [selectedCircleCode, activeTab]);\n\n  // ...\n\n  useEffect(() => {\n    // Check if circleNames is available and not empty\n    if (circleNames && circleNames.length > 0) {\n      // When the component loads, fetch data based on default state or user's location\n      if (selectedCircleCode && activeTab) {\n        fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n      }\n    }\n  }, [circleNames, selectedCircleCode, activeTab]);\n  const fetchData = async (circleCode, voucherKey, type) => {\n    try {\n      setLoading(true);\n      const headers = new Headers({\n        'Content-Type': 'application/json'\n      });\n      const requestBody = {};\n      console.log('circleCode:' + circleCode, 'voucherKey:' + voucherKey, 'type: ' + type);\n      const apiUrl = `${baseurl}/rcpt-api/getnewplans?circlecode=${circleCode}`;\n      console.log('API Call:', apiUrl); // Log the API call for debugging\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(requestBody)\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n        //   setTableData(data);\n        console.log(data);\n        const uniqueData = [];\n        const planNamesSet = new Set();\n        // setTableData(data);\n        data.forEach(item => {\n          if (!planNamesSet.has(item.recharge_amount)) {\n            planNamesSet.add(item.plan_name);\n            uniqueData.push(item);\n          }\n        });\n        setTableData(data);\n      } else {\n        console.error('Error fetching data. Status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  let tableColumns = ['Plan Value', 'Validity', 'Description', ''];\n  if (activeTab === 'General Topup') {\n    // Change column names and data field names for the 'General Vouchers' tab\n    tableColumns = ['Plan Value', 'Talktime', 'Description', ''];\n  }\n  console.log(circleNames);\n  console.log(tableData);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Headermobile, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row marginforprow\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"plansform\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"state\",\n            className: \"col-2\",\n            children: \"Choose a Region:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"state\",\n            className: \"col-7 ssopt\",\n            value: selectedState,\n            onChange: e => setSelectedState(e.target.value),\n            children: circleNames.map((circle, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: circle.circle_name,\n              children: circle.circle_name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"col-2 submitbutton\",\n            onClick: () => {\n              const circleCode = getCircleCodeForState(selectedState);\n              setSelectedCircleCode(circleCode);\n            },\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plans-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tab-content\",\n          children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-border\",\n            role: \"status\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\",\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: tableColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: column\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: tableData.map((item, index) =>\n              /*#__PURE__*/\n              // <tr key={index}>\n              //   <td>{item.denomination}</td>\n              //   <td>{activeTab === 'General Topup' ? item.talk_value : item.validity} </td>\n              //   <td>{item.description || item.remarks}</td>\n              //   <td>\n              //     <Link to=\"https://portal2.bsnl.in/myportal/quickrecharge.do\">\n              //       <button className=\"denominbtns btn\">Buy</button>\n              //     </Link>\n              //   </td>\n              // </tr>\n              _jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.recharge_amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.recharge_validity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: item.recharge_longdesc\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"https://portal2.bsnl.in/myportal/quickrecharge.do\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"denominbtns btn\",\n                      children: \"Buy\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 374,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Plan, \"CdfUT1Kw/T3K+BGG1gn17bCZQMs=\");\n_c = Plan;\nexport default Plan;\nvar _c;\n$RefreshReg$(_c, \"Plan\");","map":{"version":3,"names":["React","useState","useEffect","Headermobile","Footer","baseurl","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","tabMappings","voucherKey","type","Plan","_s","activeTab","setActiveTab","tableData","setTableData","loading","setLoading","circleNames","setCircleNames","selectedState","setSelectedState","selectedCircleCode","setSelectedCircleCode","duplicateNames","setDuplicateNames","handleTabClick","tabLabel","fetchData","fetchCircleName","location","navigator","geolocation","getCurrentPosition","position","userLatitude","coords","latitude","userLongitude","longitude","userState","determineUserLocation","console","log","circleCode","getCircleCodeForState","circleNamesUrl","headers","Headers","requestBody","fetch","method","body","then","response","json","data","selectedCircle","find","circle","circle_name","JSON","stringify","circle_code","Array","isArray","names","map","item","catch","error","stateCoordinates","Object","keys","state","isInsideRegion","point","center","radius","distance","Math","sqrt","pow","length","apiUrl","status","uniqueData","planNamesSet","Set","forEach","has","recharge_amount","add","plan_name","push","tableColumns","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","id","value","onChange","e","target","index","onClick","role","column","recharge_validity","recharge_longdesc","to","_c","$RefreshReg$"],"sources":["/home/saiprasad/rcptlive/rcpt/src/Mobile/Plan.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Headermobile from './Headermobile';\nimport Footer from './Footer';\nimport { baseurl } from '../Component/Baseurl';\nimport { Link } from 'react-router-dom';\n\nconst tabMappings = {\n  'Populer Vouchers': { voucherKey: 'populervouchers', type: 'populervouchers' },\n  'General Topup': { voucherKey: 'generaltopup', type: 'generaltopup' },\n  'Data Vouchers': { voucherKey: 'vouchers', type: 'DATA' },\n  'Voice Vouchers': { voucherKey: 'vouchers', type: 'VOICE' },\n  'SMS Vouchers': { voucherKey: 'vouchers', type: 'SMS' },\n  'ISD Vouchers': { voucherKey: 'vouchers', type: 'ISD' },\n  'Others Vouchers': { voucherKey: 'vouchers', type: 'OTHER' },\n  'Plan Extension': { voucherKey: 'vouchers', type: 'EXTENSON' },\n  'Plan Migration': { voucherKey: 'vouchers', type: 'MIGRATION' },\n};\n\nfunction Plan() {\n  const [activeTab, setActiveTab] = useState('Populer Vouchers');\n  const [tableData, setTableData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [circleNames, setCircleNames] = useState([]);\n  const [selectedState, setSelectedState] = useState(''); // State selected by the user\n  const [selectedCircleCode, setSelectedCircleCode] = useState('');\n  const [duplicateNames, setDuplicateNames] = useState([]);\n\n\n  const handleTabClick = (tabLabel) => {\n    setActiveTab(tabLabel);\n    const { voucherKey, type } = tabMappings[tabLabel];\n    fetchData(voucherKey, type, selectedCircleCode);\n  };\n\n\n\n\n\n\n\n  useEffect(() => {\n    fetchCircleName();\n  }, []);\n\n  const fetchCircleName = async () => {\n    let location;\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const userLatitude = position.coords.latitude;\n        const userLongitude = position.coords.longitude;\n\n        // Implement your logic to map coordinates to a state and set the user's current state\n        const userState = determineUserLocation(userLatitude, userLongitude);\n        console.log(\"Geo locatooooo:: \" + userState);\n        if (userState) {\n          console.log(\"Geo location \" + userState);\n          location = userState;\n          console.log(\"Geo location11 \" + location);\n\n          setSelectedState(userState);\n          console.log(\"shghghh:: \" + selectedState)\n          const circleCode = getCircleCodeForState(userState);\n          setSelectedCircleCode(circleCode);\n          console.log(\"circle code ramu:: \" + circleCode)\n        }\n        // Set the default selected state based on the user's current state\n        setSelectedState(userState);\n      });\n    }\n\n    // Define the API endpoint for fetching circle names\n    const circleNamesUrl = `${baseurl}/rcpt-api/getcircle`;\n    // const allcircledata=null;\n\n    const headers = new Headers({\n      'Content-Type': 'application/json',\n    });\n\n    const requestBody = {};\n\n    fetch(circleNamesUrl, {\n      method: 'POST',\n      headers: headers,\n      body: requestBody\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setCircleNames(data);\n        console.log(\"Geo location12 \" + location);\n\n        const selectedCircle = data.find((circle) => circle.circle_name === location);\n        console.log(\"selectedCircle at url: \" + JSON.stringify(selectedCircle));\n        setSelectedCircleCode(selectedCircle.circle_code)\n        if (data && Array.isArray(data)) {\n          const names = data.map((item) => item.circle_name);\n          //console.log(data)\n\n\n          //  setCircleNames(data); // Store the entire response, including circle_code\n          console.log(\"state name:: \" + selectedState);\n          // setCircleName1(data); // Store the entire response, including circle_code\n\n          //allcircledata=data;\n          //console.log(\"all cicle amain:: \" + JSON.stringify(data))\n\n        }\n      })\n      .catch((error) => {\n        console.error('Error fetching circle names:', error);\n      });\n\n\n  }\n\n  useEffect(() => {\n    console.log(\"All circles for ts:: \" + JSON.stringify(circleNames))\n\n  }, [])\n\n\n\n\n  // Implement your own logic to determine the user's location based on coordinates\n  function determineUserLocation(latitude, longitude) {\n    // Replace this with your own logic to map coordinates to a state\n    // This is a simplified example with a few states for demonstration\n    const stateCoordinates = {\n      'Andaman and Nicobar Islands': { latitude: 11.7401, longitude: 92.6586 },\n      'Andhra Pradesh': { latitude: 15.9129, longitude: 79.7400 },\n      'Arunachal Pradesh': { latitude: 27.1004, longitude: 93.6165 },\n      'Assam': { latitude: 26.2006, longitude: 92.9376 },\n      'Bihar': { latitude: 25.0961, longitude: 85.3131 },\n      'Chandigarh': { latitude: 30.7333, longitude: 76.7794 },\n      'Chhattisgarh': { latitude: 21.2787, longitude: 81.8661 },\n      'Dadra and Nagar Haveli and Daman and Diu': { latitude: 20.1809, longitude: 73.0169 },\n      'Delhi': { latitude: 28.6139, longitude: 77.2090 },\n      'Goa': { latitude: 15.2993, longitude: 74.1240 },\n      'Gujarat': { latitude: 22.2587, longitude: 71.1924 },\n      'Haryana': { latitude: 29.0588, longitude: 76.0856 },\n      'Himachal Pradesh': { latitude: 31.1048, longitude: 77.1734 },\n      'Jammu and Kashmir': { latitude: 33.7782, longitude: 76.5762 },\n      'Jharkhand': { latitude: 23.6102, longitude: 85.2799 },\n      'Karnataka': { latitude: 12.9716, longitude: 77.5946 },\n      'Kerala': { latitude: 10.8505, longitude: 76.2711 },\n      'Ladakh': { latitude: 34.1526, longitude: 77.5771 },\n      'Lakshadweep': { latitude: 10.5667, longitude: 72.6420 },\n      'Madhya Pradesh': { latitude: 22.9734, longitude: 78.6569 },\n      'Maharashtra': { latitude: 19.7515, longitude: 75.7139 },\n      'Manipur': { latitude: 24.6637, longitude: 93.9063 },\n      'Meghalaya': { latitude: 25.4670, longitude: 91.3662 },\n      'Mizoram': { latitude: 23.1645, longitude: 92.9376 },\n      'Nagaland': { latitude: 26.1584, longitude: 94.5624 },\n      'Odisha': { latitude: 20.9517, longitude: 85.0985 },\n      'Puducherry': { latitude: 11.9416, longitude: 79.8083 },\n      'Punjab': { latitude: 31.1471, longitude: 75.3412 },\n      'Rajasthan': { latitude: 27.0238, longitude: 74.2179 },\n      'Sikkim': { latitude: 27.5330, longitude: 88.5122 },\n      'Tamil Nadu': { latitude: 13.0827, longitude: 80.2707 },\n      'Telangana': { latitude: 17.3850, longitude: 78.4867 },\n      'Tripura': { latitude: 23.9408, longitude: 91.9882 },\n      'Uttar Pradesh': { latitude: 26.8467, longitude: 80.9462 },\n      'Uttarakhand': { latitude: 30.0668, longitude: 79.0193 },\n      'West Bengal': { latitude: 22.5726, longitude: 88.3639 },\n      // Add coordinates for other states as well\n    };\n\n    const userState = Object.keys(stateCoordinates).find((state) =>\n      isInsideRegion(\n        { latitude, longitude },\n        stateCoordinates[state],\n        1.5 // Set a radius as needed\n      )\n    );\n    setSelectedState(userState);\n\n    return userState || 'Default State';\n  }\n\n  useEffect(() => {\n    console.log(\"userState:: \" + selectedState)\n\n  }, [])\n\n\n  function isInsideRegion(point, center, radius) {\n    const distance = Math.sqrt(\n      Math.pow(point.latitude - center.latitude, 2) +\n      Math.pow(point.longitude - center.longitude, 2)\n    );\n    return distance <= radius;\n  }\n\n\n\n  useEffect(() => {\n\n    const circleCode = getCircleCodeForState(selectedState);\n    setSelectedCircleCode(circleCode);\n\n  }, []);\n\n  useEffect(() => {\n\n    fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n\n  }, [])\n\n  const getCircleCodeForState = (state) => {\n\n    const selectedCircle = circleNames.find((circle) => circle.circle_name === state);\n\n    return selectedCircle ? selectedCircle.circle_code : '';\n  };\n\n\n\n\n  useEffect(() => {\n    // ...\n\n    if (selectedState) {\n      const circleCode = getCircleCodeForState(selectedState);\n      setSelectedCircleCode(circleCode);\n    }\n  }, [selectedState]);\n\n  useEffect(() => {\n    if (selectedCircleCode && activeTab) {\n      fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n    }\n  }, [selectedCircleCode, activeTab]);\n\n  // ...\n\n  useEffect(() => {\n    // Check if circleNames is available and not empty\n    if (circleNames && circleNames.length > 0) {\n      // When the component loads, fetch data based on default state or user's location\n      if (selectedCircleCode && activeTab) {\n        fetchData(selectedCircleCode, tabMappings[activeTab].voucherKey, tabMappings[activeTab].type);\n      }\n    }\n  }, [circleNames, selectedCircleCode, activeTab]);\n\n  const fetchData = async (circleCode, voucherKey, type) => {\n    try {\n      setLoading(true);\n      const headers = new Headers({\n        'Content-Type': 'application/json',\n      });\n      const requestBody = {};\n      console.log('circleCode:' + circleCode, 'voucherKey:' + voucherKey, 'type: ' + type);\n\n      const apiUrl = `${baseurl}/rcpt-api/getnewplans?circlecode=${circleCode}`;\n\n      console.log('API Call:', apiUrl); // Log the API call for debugging\n\n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(requestBody),\n      });\n      if (response.status === 200) {\n        const data = await response.json();\n      //   setTableData(data);\n      console.log(data);\n        const uniqueData = [];\n        const planNamesSet = new Set();\n        // setTableData(data);\n        data.forEach(item => {\n          if (!planNamesSet.has(item.recharge_amount)) {\n            planNamesSet.add(item.plan_name);\n            uniqueData.push(item);\n          }\n        });\n  \n        setTableData(data);\n      } else {\n        console.error('Error fetching data. Status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  let tableColumns = ['Plan Value', 'Validity', 'Description', ''];\n\n  if (activeTab === 'General Topup') {\n    // Change column names and data field names for the 'General Vouchers' tab\n    tableColumns = ['Plan Value', 'Talktime', 'Description', ''];\n  }\n  console.log(circleNames);\nconsole.log(tableData)\n  return (\n    <>\n      <Headermobile />\n      <div className='container'>\n        <div className='row marginforprow'>\n          <form className='plansform'>\n            <label htmlFor=\"state\" className='col-2'>\n              Choose a Region:\n            </label>\n            <select\n              id=\"state\"\n              className=\"col-7 ssopt\"\n              value={selectedState}\n              onChange={(e) => setSelectedState(e.target.value)}\n            >\n\n              {circleNames.map((circle, index) => (\n                <option key={index} value={circle.circle_name}>\n                  {circle.circle_name}\n                </option>\n              ))}\n            </select>\n            <button\n              className=\"col-2 submitbutton\"\n              onClick={() => {\n                const circleCode = getCircleCodeForState(selectedState);\n                setSelectedCircleCode(circleCode);\n              }}\n            >\n              Submit\n            </button>\n          </form>\n        </div>\n        <div className=\"plans-container\">\n          {/* <div className=\"vertical-tabs\">\n            {Object.keys(tabMappings).map((tabLabel) => (\n              <div\n                key={tabLabel}\n                className={tab ${activeTab === tabLabel ? 'active' : ''}}\n                onClick={() => handleTabClick(tabLabel)}\n              >\n                {tabLabel}\n              </div>\n            ))}\n          </div> */}\n\n          <div className=\"tab-content\">\n            {loading ? (\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            ) : (\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    {tableColumns.map((column, index) => (\n                      <th key={index}>{column}</th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {tableData.map((item, index) => (\n                    // <tr key={index}>\n                    //   <td>{item.denomination}</td>\n                    //   <td>{activeTab === 'General Topup' ? item.talk_value : item.validity} </td>\n                    //   <td>{item.description || item.remarks}</td>\n                    //   <td>\n                    //     <Link to=\"https://portal2.bsnl.in/myportal/quickrecharge.do\">\n                    //       <button className=\"denominbtns btn\">Buy</button>\n                    //     </Link>\n                    //   </td>\n                    // </tr>\n                    <tr key={index}>\n                      <td>{item.recharge_amount}</td>\n                      <td>{item.recharge_validity}</td>\n                      <td>{item.recharge_longdesc}</td>\n                      <td>\n                        <Link to=\"https://portal2.bsnl.in/myportal/quickrecharge.do\">\n                          <button className=\"denominbtns btn\">Buy</button>\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n        </div>\n      </div>\n      <div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n\nexport default Plan;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}